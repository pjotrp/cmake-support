
message(STATUS "RubyMacros.cmake")

MACRO(BUILD_RUBY_BINDINGS)
  MESSAGE("Building RUBY bindings")
  POST_BUILD_RUBY_BINDINGS()
ENDMACRO(BUILD_RUBY_BINDINGS)

MACRO(POST_BUILD_RUBY_BINDINGS)
  IF(APPLE)
    MESSAGE("Create ${M_NAME}.dylib")
    ADD_CUSTOM_COMMAND(
      TARGET ${M_MODULE}
      POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy lib${M_NAME}.so ${M_NAME}.dylib
    )
  ENDIF(APPLE)
ENDMACRO()

# Set up a test
MACRO(TEST_RUBY_BINDINGS)

  ENABLE_TESTING()

  IF(CYGWIN)
    SET(_SEARCHPATH env PATH=${MODULE_LIBRARY_BINPATH}:$ENV{PATH})
  ENDIF(CYGWIN)

  ADD_TEST(TestRuby${M_NAME} ${_SEARCHPATH} ${RUBY_EXECUTABLE} -I../${M_NAME} ./../test/test_${M_NAME}.rb)
  SET(_SEARCHPATH unknown)

ENDMACRO(TEST_RUBY_BINDINGS)

# Installation location for the Ruby module
MACRO(INSTALL_RUBY_BINDINGS)

  message("Install TARGETS=" ${M_MODULE})
  message("Install DESTINATION=" ${RUBY_LIB_PATH}/${MAP_projectname})
  IF(APPLE)
    INSTALL(FILES ${M_MODULE}.dylib DESTINATION ${RUBY_LIB_PATH} )
  ENDIF(APPLE)

  INSTALL(TARGETS ${M_MODULE} 
     LIBRARY DESTINATION ${RUBY_LIB_PATH}/${MAP_projectname}
     ARCHIVE DESTINATION ${RUBY_LIB_PATH}/${MAP_projectname}
     RUNTIME DESTINATION bin 
  )

ENDMACRO(INSTALL_RUBY_BINDINGS)
